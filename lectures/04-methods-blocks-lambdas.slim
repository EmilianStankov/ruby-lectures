= slide 'Днес' do
  list:
    Вечерните новини
    Коментари по първа задача и по второ предизвикателство
    Методи, блокове, анонимни функции в детайли

= slide 'Втора задача' do
  list:
    Ще бъде публикувана довечера
    Срокът ще бъде до идния понеделник, 17:00 ч.
    Ще ви трябват класове. За тях ще говорим в сряда

= slide 'Трето предизвикателство' do
  list:
    Вероятно ще го дадем четвъртък вечер
    Срокът вероятно ще е отново до събота на обяд

= slide 'Откриваме нова рубрика' do
  img.action src="04/descending-into-the-darkness.jpg"

= slide 'Ще има кал' do
  img src="04/caving-is-muddy.jpg"

= slide 'Възможно е да засядаме понякога' do
  img src="04/stuck-in-a-cave.jpg"

= slide 'Ще откриваме красиви места' do
  img src="04/discovering-beauty.jpg"

= slide 'Code Spelunking' do
  list:
    "Code Spelunking" е действителен термин в сферата
    Означава ровичкане в и изследване на чужд код
    От макро-архитектура, до дребни и интересни похвати и трикове
    Води до добро опознаване на езика и практиките в общността, както и на някои библиотеки
    Ще избираме различни проекти с отворен код и ще отделяме по малко време на лекции
    Ще започнем близките седмици, след като натрупаме още малко знания

= slide 'Първа задача' do
  p Преглед и коментари над решенията.

= slide 'Решения', 'the ugly' do
  list:
    Не предавайте в последния момент!
    Пускайте си примерните тестове!
    Конвенции, конвенции, конвенции... не бъдете зли!
    Имена.
    Идиоматичност.

= slide '...the ugly 01' do
  example:
    def sum_two_series(first, second, index)
            for i in 1 .. index - 1
                    first += second
                    first, second = second, first
            end
            first
    end
    def series(name, index)
            if name == 'fibonacci' then sumtwo_series(1, 1, index) end
            if name == 'lucas' then sumtwo_series(2, 1, index) end
            if name=='summed' then sumtwo_series(1, 1, index)+sumtwo_series(2, 1,index) end
    end

= slide '...the ugly 02' do
  example:
    def series(type, n)
      if   type === 'fibonacci'
        (0..n).inject([1, 0]){|(sum, item)| [item, sum + item]}[0]
      elsif type === 'lucas'
        (1..n).inject([-1, 2]){|(sum, item)| [item, sum + item]}[0]
      else
        series('fibonacci', n) + series('lucas', n)
      end
    end


= slide '...the ugly 03' do
  example:
    def series(series_calculate , number)
      fibonacci = (1..number).inject([0 , 1]) { |(a , b) , _| [b , a + b]}[0]
      lucas = (1..number).inject([2 , 1]) { |(a , b) , _| [b , a + b] }[0]
      if series_calculate == "fibonacci" then fibonacci
      elsif series_calculate == "lucas" then lucas
      elsif series_calculate == "sum" then fibonacci + lucas
      end
    end

= slide '...the ugly 04' do
  example:
    def fibonacci(n)
            return 1 if n == 1 or n == 2
            return fibonacci(n-1) + fibonacci(n-2)
    end

    def lucas(n)
            return 2 if n == 1
            return 1 if n == 2
            return lucas(n-1) + lucas(n-2)
    end

    def summed(n)
            fibonacci(n) + lucas(n)
    end

    def series(name, n)
    puts send(name, n)
    end

= slide '...the bad', 'правилният mindset при оптимизиране' do
  list:
    Bottlenecks.
    Micro-optimization and when to do it.
    Asymptotic complexity - the alternative.

= slide 'Решения', 'the good' do
  list:
    Правилни
    Следват конвенции
    Идиоматични
    Близо до домейна на решавания проблем
    Прости
    Ясни
    Умни (не е същото като хитри)

= slide '...the good 01' do
  example:
    def series(sequence, index)
      case sequence
        when 'fibonacci' then fibonacci(index)
        when 'lucas' then lucas(index)
        else fibonacci(index) + lucas(index)
      end
    end

    def fibonacci(index)
      case index
        when 1, 2 then 1
        else fibonacci(index - 1) + fibonacci(index - 2)
      end
    end

    def lucas(index)
      case index
        when 1 then 2
        when 2 then 1
        else lucas(index - 1) + lucas(index - 2)
      end
    end

= slide '...the good 02' do
  example:
    # http://mathforum.org/library/drmath/view/51448.html
    PHI = (1 + Math.sqrt(5)) / 2

    def fibonacci(n)
      ((PHI**n - (-PHI)**(-n)) / Math.sqrt(5)).round
    end

    def lucas(n)
      (PHI**(n - 1) + (1 - PHI)**(n - 1)).round
    end

    def series(name, n)
      case name
        when "fibonacci" then fibonacci(n)
        when "lucas" then lucas(n)
        when "summed" then lucas(n) + fibonacci(n)
      end
    end

= slide '...the good 03' do
  example:
    class SequenceMemberGenerator
      def initialize(first_element, second_element)
        @sequence_store = Hash.new do |sequence, index|
          sequence[index] = sequence[index - 1] + sequence[index - 2]
        end
        @sequence_store[1] = first_element
        @sequence_store[2] = second_element
      end

      def [](index)
        @sequence_store[index]
      end
    end

    class Fibonacci
      def initialize
        @@fibonacci_sequence ||= SequenceMemberGenerator.new(1, 1)
      end

      def [](index)
        @@fibonacci_sequence[index]
      end
    end

    class Lucas
      def initialize
        @@lucas_sequence ||= SequenceMemberGenerator.new(2, 1)
      end

      def [](index)
        @@lucas_sequence[index]
      end
    end

    class Summed
      def [](index)
        Fibonacci.new[index] + Lucas.new[index]
      end
    end

    def series(name, index)
      if name == 'fibonacci'
        Fibonacci.new[index]
      elsif name == 'lucas'
        Lucas.new[index]
      else
        Summed.new[index]
      end
    end

= slide 'Предизвикателства', 'разбирате ги погрешно' do
  list:
    Бонус
    Зъл код
    Не са мини задача
    Показват нещо конкретно
    How tall is the Eifel Tower?

= slide 'Второто предизвикателство' do
  list:
    Избягвайте `insert` – мутиране
    По-добре: `string.prepend('|').concat('|')` или интерполация: `"|#{foo}|"`
    Интерполацията в низове с двойни кавички се ползва много
    Не слагайте сложни изрази вътре
    Прегледайте решенията на колегите си, има някои много любопитни
    Подклаждайте любопитството си, но се стремете и към прост, праволинеен и разбираем код

= slide 'Методи', 'дефиниране' do
  p
    | Дефинирането става с ключовата дума <code>def</code>. Резултатът от функцията е
      последният оценен израз, ако няма <code>return</code> някъде по-рано.

  example:
    def factorial(n)
      if n == 1
        1
      else
        factorial(n - 1) * n
      end
    end

  p В Ruby няма tail recursion оптимизация. Този код яде стек.

= slide 'Методи', 'отгоре-отгоре' do
  list:
    В Ruby няма такова нещо като "глобална функция"
    `def` винаги дефинира метод в някакъв клас
    Ако `def` не е в дефиниция на клас, отива като `private` метод на `Object`
    `puts` е пример за нещо такова, както и методите, които дефинирате в irb
    Дефинирането на методи в `Object` е удачно само за кратки скриптове
    Отвъд тях, дефинирането на методи в `Object` е <strong>ужасно</strong> лош стил

= slide 'Методи в съществуващи класове', 'Ще ви трябва за бъдещи домашни' do
  p За да добавите метод в съществуващ клас, например <code>Array</code>, просто "отваряте" класа и дефинирате метода:

  annotate:
    class Array
      def fourty_second
        self[41]
      end
    end

    list     = []
    list[41] = 'The Universe'

    list.fourty_second # =>

= slide 'Методи', 'return' do
  p Можете да излезете от функция с <code>return</code>:

  example:
    def includes?(array, element)
      array.each do |item|
        return true if item == element
      end
      false
    end

  p.action
    ' Разбира се, такава функция е излишна.
      Може да ползвате <code>array.include?(element)</code>.

= slide 'Методи', 'стойности по подразбиране' do
  p Параметрите в Ruby могат да имат стойности по подразбиране:

  annotate:
    def order(drink, size = 'large')
      "A #{size} #{drink}, please!"
    end

    order 'tea'             # =>
    order 'coffee', 'small' # =>

= slide 'Методи', 'стойности по подразбиране (2)' do
  list:
    Стойностите по подразбиране могат да бъдат всякакъв израз
    "Всякакъв израз" включва и извикване на друга функция
    Оценяват се на всяко извикване
    Сложни изрази за аргументи по подразбиране са лош стил

= slide 'Методи', 'променлив брой аргументи' do
  p
    | Методите в ruby могат да вземат променлив брой аргументи. Параметърът се означава със
      <code>*</code> и при извикване на функцията съдържа списък от аргументите.

  annotate:
    def say_hi(name, *drinks)
      "Hi, I am #{name} and I enjoy: #{drinks.join(', ')}"
    end

    say_hi 'Mityo', 'coffee', 'tea', 'water' # =>

= slide 'Методи', 'променлив брой аргументи' do
  p Параметърът за променлив брой аргументи може да е на всяка позиция в дефиницията:

  example:
    def something(*a, b, c)
    end

    def something(a, *b, c)
    end

  p Очевидно, може да има само един такъв параметър във функция.

= slide 'Методи', '...и техните приятели, хешовете' do
  p
    ' Когато последният аргумент е хеш, може да изтървете фигурните скоби около него.
      Долните редове правят едно и също:

  example:
    def order(drink, preferences)
    end

    order('Latte', {:size => 'grande', :syrup => 'hazelnut'})
    order 'Latte', {:size => 'grande', :syrup => 'hazelnut'}
    order 'Latte', :size => 'grande', :syrup => 'hazelnut'
    order 'Latte', size: 'grande', syrup: 'hazelnut'

  p Така Ruby симулира извикане на функция с наименовани аргументи. Последният ред работи при версия 1.9+.

= slide 'Методи', '...и хешове, отново' do
  p Често ще видите код в този вид:

  example:
    def order(drink, preferences = {})
    end

    order 'Latte'
    order 'Latte', size: 'grande', syrup: 'hazelnut'

  p
    ' Така <code>preferences</code> е незадължителен и няма нужда да го подавате, ако
      нямате предпочитания.

= slide 'Псевдо-keyword arguments', 'недостатъци' do
  p Този "трик" с хешовете се ползва много, понякога прекалено много. Той има и ред недостатъци:

  list:
    За да ползвате стойност, трябва да я достъпите през променлива (например `preferences[:size]`)
    Задаването на стойности по подразбиране е криво и може да се прави само в тялото на метода
    Например така: `preferences[:size] ||= 'grande'`
    Или така: `preferences = {size: 'grande', syrup: 'hazelnut'}.merge(preferences)`
    Проверката за задължителни keyword args става пак ръчно
    Проверката дали някой не ви е подал "излишни" и непознати ключови думи за аргументи – пак ръчно

= slide 'Истински keyword arguments' do
  p Горните недостатъци и нуждата водят до появата на истински keyword arguments в Ruby 2.0.

  annotate:
    def order(drink, size: 'grande', syrup: nil)
      message = "You ordered a #{size} #{drink}"
      message << " with a #{syrup} syrup" if syrup
      message
    end

    order 'Latte'                       # =>
    order 'Latte', syrup: 'hazelnut'    # =>
    order 'Latte', filling: 'chocolate' #!

= slide 'Задължителни keyword arguments' do
  example:
    def order(drink:, size: 'grande', syrup: nil)
      message = "You ordered a #{size} #{drink}"
      message << " with a #{syrup} syrup" if syrup
      message
    end

    order drink: 'Latte'                    # "You ordered a grande Latte"
    order syrup: 'hazelnut', drink: 'Latte' # "You ordered a grande Latte with a hazelnut syrup"
    order                                   # error: ArgumentError: missing keyword: drink

= slide '**kwargs' do
  example:
    def order(drink:, size: 'grande', **options)
      message = "You ordered a #{size} #{drink}"
      message << " with these options: #{options.inspect}" unless options.empty?
      message
    end

    order drink: 'Latte'
    # You ordered a grande Latte
    order syrup: 'hazelnut', drink: 'Latte'
    # You ordered a grande Latte with these options: {:syrup=>"hazelnut"}
    order
    # error: ArgumentError: missing keyword: drink

= slide 'Истински keyword arguments', 'предимства' do
  list:
    Ако има стойност по подрзбиране, тя се задава редом с дефиницията на метода
    Ползвате стойността на аргумента директно, няма нужда от отделна променлива
    Непознати ключови думи, подадени като аргументи, предизвикват грешка
    Липсващи и задължителни ключови думи за аргументи също предизвикват грешка

= slide 'Методи', 'предикати' do
  p
    ' Името на метод може да завършва на <code>?</code>. Това се ползва, за методи,
      които връщат лъжа или истина (предикати):

  example:
    def even?(n)
      n % 2 == 0
    end

    even? 2
    even? 3

  p Това е само конвенция.

= slide 'Методи', 'две версии' do
  p
    ' Името на метод може да завършва на <code>!</code>.
      Това се ползва, когато <strong>методът има две версии с различно поведение</strong>:

  example:
    numbers = [4, 1, 3, 2, 5, 0]

    numbers.sort   # връща нов списък
    numbers.sort!  # променя списъка на място

  p В случая, "по-опасният" метод завършва на удивителна.
  p Ако имате само една версия на метод с такова име, не слагайте удивителна.

= slide 'Анонимни функции', 'ламбди' do
  p
    ' Анонимни функции в Ruby се дефинират с <code>lambda</code>. Имат три начина на извикване:

  example:
    pow = lambda { |a, b| a**b }

    pow.call 2, 3
    pow[2, 3]
    pow.(2, 3)

  p
    ' За нещастие, не може да извиквате така: <code>double(2)</code>. Това е несъвместимо с
      изтърваването на скобите при извикването на метод.

= slide 'Анонимни функции', 'ламбди (2)' do
  p Може и така:

  example:
    double = lambda do |x|
      x * 2
    end

  p Важи стандартната конвенция за <code>{ }</code> и <code>do</code>/<code>end</code>.

= slide 'Анонимни функции', 'ламбди (3)' do
  p От 1.9 има по-симпатичен синтаксис за ламбди:

  example:
    say_hi = lambda { puts 'Hi there!' }
    double = lambda { |x| x * 2 }
    divide = lambda { |a, b| a / b }

    say_hi = -> { puts 'Hi there' }
    double = ->(x) { x * 2 }
    divide = -> a, b { a / b }

= slide 'Блокове', 'където става забавно' do
  p
    ' Всеки метод може да приеме допълнителен аргумент, който е "анонимна функция". Може да
      го извикате от метода с <code>yield</code>:

  example:
    def twice
      yield
      yield
    end

    twice { puts 'Ruby rocks!' }

= slide 'Блокове', 'аргументи' do
  p Блокът може да приема аргументи:

  example:
    def sequence(first, last, step)
      current = first
      while current < last
        yield current
        current += step
      end
    end

    sequence(1, 10, 2) { |n| puts n }
    # Извежда 1, 3, 5, 7, 9

= slide 'Блокове', 'стойности' do
  p <code>yield</code> се оценява до стойността на блока:

  annotate:
    def calculate
      result = yield(2)
      "The result for 2 is #{result}"
    end

    calculate { |x| x**2 } # =>

= slide 'Блокове', 'един пример' do
  p Или как можем да напишем <code>filter</code>:

  annotate:
    def filter(array)
      result = []
      array.each do |item|
        result << item if yield item
      end
      result
    end

    filter([1, 2, 3, 4, 5]) { |n| n.odd? } # =>

  .action
    p Разбира се, такъв метод в Ruby вече съществува – <code>Enumerable#select</code>.

= slide 'Блокове', '#block_given?' do
  p <code>block_given?</code> ще ви каже дали методът е извикан с блок:

  example:
    def i_can_haz_block
      if block_given?
        puts 'yes'
      else
        puts 'no'
      end
    end

    i_can_haz_block                  # no
    i_can_haz_block { 'something' }  # yes

= slide 'Блокове', '& при извикване на метод' do
  p Ако имате ламбда, която искате да подадете като блок, може да ползвате <code>&</code>:

  example:
    is_odd = lambda { |n| n.odd? }

    filter([1, 2, 3, 4, 5], &is_odd)
    filter([1, 2, 3, 4, 5]) { |n| n.odd? }

  p Горните са (почти) еквиваленти. Има малка разлика в някои други случаи.

= slide 'Блокове', 'в сигнатурата' do
  p Ако искате да вземете блока като обект, има начин:

  example:
    def invoke_with(*args, &block)
      block.call *args
    end

    invoke_with(1, 2) { |a, b| puts a + b }

  p.action Тук виждате и как може да викате функция като използвате списък, вместо позиционни аргументи.

= slide 'Блокове', 'в сигнатурата (2)' do
  p Може и така:

  annotate:
    def make_block(&block)
      block
    end

    doubler = make_block { |n| n * 2 }
    doubler.call 2 # =>
